name: "Terraform Plan/Apply"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

# Check https://github.com/marketplace/actions/azure-login for further auth docuemntation
# Requires the following secrets: ARM_TENANT_ID, ARM_SUBSCRIPTION_ID, ARM_CLIENT_ID
env:
  ARM_USE_OIDC: true
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

jobs:
  tf-check:
    name: "Terraform Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

  create-state-container:
    name: "Create State Container"
    runs-on: ubuntu-latest
    needs: [tf-check]
    outputs:
      saName: ${{ steps.deploy-bicep.outputs.saName }}
      containerName: ${{ steps.deploy-bicep.outputs.containerName }}
      rgName: ${{ steps.deploy-bicep.outputs.rgName }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep file
        id: deploy-bicep
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template: ./.github/utils/bicep/main.bicep
          scope: subscription
          region: westeurope
          parameters: "rgName=rg-weu-terraform saName=stcopr42prak containerName=github-config-state"
          failOnStdErr: false

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [create-state-container]
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          echo "TF Subscription ID: $ARM_SUBSCRIPTION_ID"
          echo "TF Tenant ID: $ARM_TENANT_ID"
          echo "TF Use OIDC: $ARM_USE_OIDC"
          echo "TF Storage Account Name: ${{ needs.create-state-container.outputs.saName }}"
          echo "TF Storage Container Name: ${{ needs.create-state-container.outputs.containerName }}"
          echo "TF Storage Resource Group Name: ${{ needs.create-state-container.outputs.rgName }}"
          echo "TF Storage Key: terraform.tfstate"
          terraform init \
            -backend-config="storage_account_name=${{ needs.create-state-container.outputs.saName }}" \
            -backend-config="container_name=${{ needs.create-state-container.outputs.containerName }}" \
            -backend-config="resource_group_name=${{ needs.create-state-container.outputs.rgName }}" \
            -backend-config="key=terraform.tfstate"

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v6
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: prod
    needs: [terraform-plan, create-state-container]

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          echo "TF Subscription ID: $ARM_SUBSCRIPTION_ID"
          echo "TF Tenant ID: $ARM_TENANT_ID"
          echo "TF Use OIDC: $ARM_USE_OIDC"
          echo "TF Storage Account Name: ${{ needs.create-state-container.outputs.saName }}"
          echo "TF Storage Container Name: ${{ needs.create-state-container.outputs.containerName }}"
          echo "TF Storage Resource Group Name: ${{ needs.create-state-container.outputs.rgName }}"
          echo "TF Storage Key: terraform.tfstate"
          terraform init \
            -backend-config="storage_account_name=${{ needs.create-state-container.outputs.saName }}" \
            -backend-config="container_name=${{ needs.create-state-container.outputs.containerName }}" \
            -backend-config="resource_group_name=${{ needs.create-state-container.outputs.rgName }}" \
            -backend-config="key=terraform.tfstate"

      # Download saved plan from artifacts
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4.1.7
        with:
          name: tfplan

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
